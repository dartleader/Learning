Arithmetic Operators:

Operator	Description
-----------------------
+			Add
-			Subtract
*			Multiply
/			Divide
%			Modulus
++			Increment
--			Decrement

Relational Operators: Test values for equality.

Operator	Description
-----------------------
==			Equal
!=			Not equal
>			Greater than
<			Less than
>=			Greater than equal
<=			Less than equal

Logical Operators: Perform logical tests.


Operator	Description
-----------------------
&&			Logical and
||			Logical or
!			Logical not
? : 		Logical ternary

Bitwise Operators: Alter bits that make up bytes and other data types.

Operator	Description
-----------------------
&			Bitwise and
|			Bitwise or
^			Bitwise xor
~			Bitwise one's complement
<<			Bitwise shift left
>>			Bitwise shift right

Assignment Operators: Assign expressions to variables.

Operator	Description
-----------------------
=			Assign equal
+=			Assign plus-equal
-= 			Assign minus-equal
*=			Assign multiply-equal
/=			Assign divide-equal
%=			Assign modulus-equal
<<=			Assign shift-left-equal
>>=			Assign shift-right-equal
&=			Assign and-equal
^=			Assign xor-equal
|=			Assign or-equal

Data Operators: Deal with aspects of pointers, member access and data structures.

Operator	Description
-----------------------
sizeof()	Get the size of
[]			Array subscript
&			The address of
*			The value of
->			Structure dereference
.			Structure reference

Miscellaneous Operators

Operator	Description
-----------------------
,			Comma
( ) 		Parentheses
{ }			Braces
:			Colon
//			Single-line comment start
/*			Multi-line comment start
*/			Multi-line comment end

C Keywords
Operator	Description
-----------------------
auto		Give a local variable a local lifetime.
break		Exit out of a compound statement.
case		A branch in a switch-statement.
char		Character data type.
const		Make a variable unmodifiable.
continue	Continue to the top of a loop.
default		Default branch in a switch-statement.
do			Start a do-while loop.
double		A double floating-point data type.
else		An else branch of an if-statement.
enum		Define a set of int constants.
extern		Declare an identifier is defined externally.
float		A floating-point data type.
for			Start a for-loop.
goto		Jump to a label.
if			Starts an if-statement.
int			An integer data type.
long		A long integer data type.
register	Declare a variable be stored in a CPU register.
return		Return from a function.
short		A short integer data type.
signed		A signed modifier for integer data types.
sizeof		Determine the size of data.
static		Preserve variable value after its scope exits.
struct		Combine variables into a single record.
switch		Start a switch-statement.
typedef		Create a new type.
union		Start a union-statement.
unsigned	An unsigned modifier for integer data types.
void		Declare a data type empty.
volatile	Declare a variable might be modified elsewhere.
while		Start a while-loop.

Syntax Structures:

-----------------------
if-statement:
-----------------------
if(TEST)
{
		CODE;
}
else if(TEST)
{
		CODE;
} else
{
		CODE;
}

-----------------------
switch-statement
-----------------------
switch (OPERAND)
{
		case CONSTANT:
				CODE;
				break;
		default:
				CODE;
}

-----------------------
while-loop
-----------------------
while(TEST)
{
		CODE;
}

-----------------------
while-continue-loop
-----------------------
while(TEST)
{
		if(OTHER_TEST)
		{
				continue;
		}
		CODE;
}

-----------------------
while-break-loop
-----------------------
while(TEST)
{
		if(OTHER_TEST)
		{
				break;
		}
		CODE;
}

-----------------------
do-while-loop
-----------------------
do
{
		CODE;
} while(TEST);

----------------------
for-loop
----------------------
for(INIT; TEST; POST)
{
		CODE;
}

----------------------
enum
----------------------
enum { CONST1, CONST2, CONST3
} NAME;

----------------------
goto
----------------------
if(ERROR_TEST)
{
		goto fail;
}

fail:
		CODE;

----------------------
function definition
----------------------
TYPE NAME(ARG1, ARG2, ..)
{
		CODE;
		return VALUE;
}

----------------------
typedef definition
----------------------
typedef DEFINITION IDENTIFIER;

----------------------
struct definition
----------------------
struct NAME {
		ELEMENTS;
		} [VARIABLE_NAME];

----------------------
typedef-struct definition
----------------------
typedef struct [STRUCT_NAME] {
		ELEMENTS;
		} IDENTIFIER;

----------------------
union definition
----------------------
union NAME {
		ELEMENTS;
		} [VARIABLE_NAME];
